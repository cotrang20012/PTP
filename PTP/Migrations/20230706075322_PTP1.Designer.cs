// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PTP.Database;

#nullable disable

namespace PTP.Migrations
{
    [DbContext(typeof(PTPContext))]
    [Migration("20230706075322_PTP1")]
    partial class PTP1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PTP.Core.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Viet Nam"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Switzerland"
                        });
                });

            modelBuilder.Entity("PTP.Core.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CHF"
                        },
                        new
                        {
                            Id = 2,
                            Name = "USD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VND"
                        });
                });

            modelBuilder.Entity("PTP.Core.Domain.Entities.Journey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Journeys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5000000,
                            CountryId = 2,
                            CurrencyId = 3,
                            Description = "A trip with company at ...",
                            EndDate = new DateTime(2023, 7, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Company Trip",
                            PlaceId = "3,4",
                            StartDate = new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Planning"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 4000000,
                            CountryId = 2,
                            CurrencyId = 3,
                            Description = "Đi chill cùng ae ...",
                            EndDate = new DateTime(2023, 7, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Đà Lạt Trip",
                            PlaceId = "3,4",
                            StartDate = new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Planning"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 4000000,
                            CountryId = 2,
                            CurrencyId = 3,
                            Description = "Đi chill cùng ae ...",
                            EndDate = new DateTime(2023, 7, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Đà Lạt Trip2",
                            PlaceId = "3,4",
                            StartDate = new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Planning"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 4000000,
                            CountryId = 2,
                            CurrencyId = 3,
                            Description = "Đi chill cùng ae ...",
                            EndDate = new DateTime(2023, 7, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Đà Lạt Trip3",
                            PlaceId = "3,4",
                            StartDate = new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Planning"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 4000000,
                            CountryId = 2,
                            CurrencyId = 3,
                            Description = "Đi chill cùng ae ...",
                            EndDate = new DateTime(2023, 7, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Đà Lạt Trip4",
                            PlaceId = "3,4",
                            StartDate = new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Planning"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 4000000,
                            CountryId = 2,
                            CurrencyId = 3,
                            Description = "Đi chill cùng ae ...",
                            EndDate = new DateTime(2023, 7, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Đà Lạt Trip5",
                            PlaceId = "3,4",
                            StartDate = new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Planning"
                        });
                });

            modelBuilder.Entity("PTP.Core.Domain.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Arizona"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "California"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            Name = "Đà Nẵng"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Hà Nội"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            Name = "Berne"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            Name = "Aargau"
                        });
                });

            modelBuilder.Entity("PTP.Core.Domain.Entities.Journey", b =>
                {
                    b.HasOne("PTP.Core.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTP.Core.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("PTP.Core.Domain.Entities.Place", b =>
                {
                    b.HasOne("PTP.Core.Domain.Entities.Country", null)
                        .WithMany("Places")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("PTP.Core.Domain.Entities.Country", b =>
                {
                    b.Navigation("Places");
                });
#pragma warning restore 612, 618
        }
    }
}
